import telebot
from trello import TrelloApi

import time

import config

TEMPORARY_LISTS = {
    "wait_to_feedback": [],
    "wait_to_sharenew": [],
    "isadmin_debounce": False,
    "feedback_debounce": False,
    "sharenew_debounce": False,
    "change_news_subscription": False,
    "admission_management_debounce": False,
    "open_doors_registration": [],
    "courses_registration": []
}

bot = telebot.TeleBot(config.BOT_TOKEN)

trello = TrelloApi(config.TRELLO_KEY)
trello.set_token(config.TRELLO_TOKEN)


def start_actions(user: telebot.types.User, pseudo_action, method, Args):
    print(user.username, "action", pseudo_action)
    if pseudo_action == "start_message":
        buttons = {}
        buttons["üéì –°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ üéì"] = {"callback_data": "specialities"}
        buttons["‚ÜóÔ∏è –í—Å—Ç—É–ø –¥–æ –∫–æ–ª–µ–¥–∂—É ‚ÜóÔ∏è"] = {"callback_data": "enter_college"}
        buttons["üôáüèª‚Äç‚ôÇÔ∏è –ü—ñ–¥–≥–æ—Ç–æ–≤—á—ñ –∫—É—Ä—Å–∏ üôáüèª‚Äç‚ôÇÔ∏è"] = {"callback_data": "courses"}
        buttons["üó∫Ô∏è –Ø–∫ –¥–æ–±—Ä–∞—Ç–∏—Å—å üó∫Ô∏è"] = {"callback_data": "college_location"}
        buttons["üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ üì∞"] = {"callback_data": "news_list"}
        buttons["üî∞ –°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∞ —Ä–∞–¥–∞ üî∞"] = {"callback_data": "stud_rada"}
        buttons["üõÇ –ü—Ä–∏–π–º–∞–ª—å–Ω–∞ –∫–æ–º—ñ—Å—ñ—è üõÇ"] = {"callback_data": "admission_info"}
        buttons["üö™ –î–µ–Ω—å –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–≤–µ—Ä–µ–π üö™"] = {"callback_data": "open_doors_days"}
        buttons["üì• –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫ üì•"] = {"callback_data": "feedback"}
        markup = telebot.util.quick_markup(buttons, row_width=1)

        # bot.send_message(chat_id=method.from_user.id, text=config.MESSAGES["start"], parse_mode="HTML")
        bot.send_message(chat_id=method.from_user.id, text="–Ø –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏ —É —Ç–∞–∫–∏—Ö –Ω–∞–ø—Ä—è–º–∫–∞—Ö:", parse_mode="HTML", reply_markup=markup)

    elif pseudo_action == "college_location":
        buttons = {}
        buttons["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è"] = {"callback_data": "to_start"}
        markup = telebot.util.quick_markup(buttons, row_width=1)

        message_info = bot.send_message(chat_id=method.from_user.id, text=config.MESSAGES["location"], parse_mode="HTML")
        bot.send_location(chat_id=method.from_user.id, latitude=48.465542998205095, longitude=35.01998831756344, reply_markup=markup)

    elif pseudo_action == "admission_info":
        buttons = {}
        buttons["üóì –ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ üóì"] = {"callback_data": "enter_college_shedule"}
        buttons["‚òéÔ∏è –ó–≤'—è–∑–∞—Ç–∏—Å—å ‚òéÔ∏è"] = {"callback_data": "admission_contact"}
        buttons["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è"] = {"callback_data": "to_start"}
        markup = telebot.util.quick_markup(buttons, row_width=1)

        bot.send_message(chat_id=method.from_user.id, text=config.MESSAGES["admission_info"], parse_mode="HTML", reply_markup=markup)
    
    elif pseudo_action == "specialities":
        buttons = {}
        buttons["171 –ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞"] = {"callback_data": "specialities_info_171"}
        buttons["123 –ö–æ–º–ø‚Äô—é—Ç–µ—Ä–Ω–∞ —ñ–Ω–∂–µ–Ω–µ—Ä—ñ—è"] = {"callback_data": "specialities_info_123"}
        buttons["172 –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó —Ç–∞ —Ä–∞–¥—ñ–æ—Ç–µ—Ö–Ω—ñ–∫–∞"] = {"callback_data": "specialities_info_172"}
        buttons["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è"] = {"callback_data": "to_start"}
        bot.send_message(chat_id=method.from_user.id, text="<b>–í –Ω–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ —Ç–∞–∫—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ:</b>", reply_markup=telebot.util.quick_markup(buttons, row_width=1), parse_mode="HTML")

    elif "specialities_info" in pseudo_action:
        spec_num = str(pseudo_action).split("_")[2]

        buttons = {}
        buttons["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è"] = {"callback_data": "delete_it"}
        markup = telebot.util.quick_markup(buttons, row_width=1)

        bot.send_message(chat_id=method.from_user.id, text=config.MESSAGES[f"spec_{spec_num}"], parse_mode="HTML", reply_markup=markup)

    elif pseudo_action == "enter_college":
        buttons = {}
        buttons["–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–π–æ–º—É"] = {"callback_data": "enter_college_rules"}
        buttons["–ü–µ—Ä–µ–ª—ñ–∫ –∫–æ–Ω–∫—É—Ä—Å–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤"] = {"callback_data": "enter_college_predmets"}
        buttons["–ü–µ—Ä–µ–ª—ñ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤—Å—Ç—É–ø—É"] = {"callback_data": "enter_college_documents"}
        buttons["–õ—ñ—Ü–µ–Ω–∑—ñ–π–Ω–∏–π –æ–±—Å—è–≥ –º—ñ—Å—Ü—å –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è"] = {"callback_data": "enter_college_seats"}
        buttons["–†–æ–∑–º—ñ—Ä –ø–ª–∞—Ç–∏ –∑–∞ –Ω–∞–≤—á–∞–Ω–Ω—è"] = {"callback_data": "enter_college_money"}
        buttons["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è"] = {"callback_data": "to_start"}
        markup = telebot.util.quick_markup(buttons, row_width=1)

        bot.send_message(chat_id=method.from_user.id, text="–î–ª—è –≤—Å—Ç—É–ø—É –¥–æ –∫–æ–ª–µ–¥–∂—É...", parse_mode="HTML", reply_markup=markup)

    elif pseudo_action == "enter_rules":
        pass
    elif pseudo_action == "entry_steps":
        pass
    elif pseudo_action == "open_doors_days":
        buttons = {}
        buttons["üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —É—á–∞—Å—Ç—å üìù"] = {"callback_data": "open_doors_register"}
        buttons["üõÇ –ü—Ä–∏–π–º–∞–ª—å–Ω–∞ –∫–æ–º—ñ—Å—ñ—è üõÇ"] = {"callback_data": "admission_info"}
        buttons["üó∫Ô∏è –Ø–∫ –¥–æ–±—Ä–∞—Ç–∏—Å—å üó∫Ô∏è"] = {"callback_data": "college_location"}
        buttons["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è"] = {"callback_data": "to_start"}
        markup = telebot.util.quick_markup(buttons, row_width=1)

        dates_formate = ""
        for d in config.OPEN_DOORS_DAYS_DATES:
            dates_formate += f"\n{d[0]} - {d[1]}"

        # bot.send_message(chat_id=method.from_user.id, text=config.MESSAGES["pk_landing_sites"], parse_mode="HTML")
        bot.send_message(chat_id=method.from_user.id, text=f"{config.MESSAGES['pk_landing_sites']}\n\n<b>–ù–∞—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–≤–µ—Ä–µ–π:</b>{dates_formate}\n\n–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑!", parse_mode="HTML",
                         reply_markup=markup)

    elif pseudo_action == "preparation_courses":
        pass
    elif pseudo_action == "news_list":
        news_count = 0
        news_cards = trello.lists.get_card(idList=config.TRELLO_CONFIG["Lists"]["News"])

        bot.send_message(chat_id=method.from_user.id, text="<b>–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∫–æ–ª–µ–¥–∂—É:</b>", parse_mode="HTML")

        for card in news_cards:
            news_count += 1
            new_card = trello.cards.get(card_id_or_shortlink=card["id"])

            split_name = str.split(new_card["name"], "/")
            date, title = split_name[0], split_name[1]
            telebot.util.antiflood(bot.send_message, chat_id=method.from_user.id,
                                   text=f"{telebot.formatting.hlink(content=title, url=new_card['cover']['scaled'][5]['url'])} [{telebot.formatting.hitalic(date)}]\n\n{str(new_card['desc'])}",
                                   parse_mode="HTML")

            if news_count > config.SEND_LAST_NEWS:
                break

        buttons = {}
        buttons["üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É üîî"] = {"callback_data": "subscribe"}
        buttons["üõë –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–∫–∏ üõë"] = {"callback_data": "unsubscribe"}
        buttons["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è"] = {"callback_data": "to_start"}
        markup = telebot.util.quick_markup(buttons, row_width=1)

        bot.send_message(chat_id=method.from_user.id, text="<b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∞–∫—ñ –¥—ñ—ó:</b>", parse_mode="HTML", reply_markup=markup)

    elif "request_info" in pseudo_action:
        if TEMPORARY_LISTS["admission_management_debounce"] == True:
            bot.answer_callback_query(method.id, "–ù–µ —Ç–∞–∫ —à–≤–∏–¥–∫–æ...")
            return
        TEMPORARY_LISTS["admission_management_debounce"] = True

        try:
            if check_on_admission(user.id)[0]:
                card_id = str.split(pseudo_action, '_')[2]

                bot.answer_callback_query(method.id, f"–ó–∞–ø—Ä–æ—Å {card_id}.")

                request_card = trello.cards.get(card_id_or_shortlink=card_id)
                request_actions = list(trello.cards.get_action(card_id_or_shortlink=card_id))

                actions_amount = request_card['badges']['comments']

                request_actions.reverse()

                buttons = {}
                text_result = ""

                buttons["üïê –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è üïê"] = {"callback_data": f"wait_admission_request_{request_card['id']}"}
                buttons["‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è ‚úÖ"] = {"callback_data": f"open_admission_request_{request_card['id']}"}
                buttons["üö´ –ó–∞–∫—Ä–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è üö´"] = {"callback_data": f"close_admission_request_{request_card['id']}"}
                buttons["üîÑÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ üîÑÔ∏è"] = {"callback_data": f"update_admission_request_{request_card['id']}"}

                actions_result = ""
                if actions_amount <= 0:
                    actions_result = telebot.formatting.hitalic("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–¥—ñ–π –≤—ñ–¥—Å—É—Ç–Ω—è.")
                else:
                    actions_result = f"            <b>–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–¥—ñ–π ({actions_amount} –¥—ñ–π):</b>"
                    for com in request_actions:
                        if com['type'] == "commentCard":
                            com_text = com['data']['text']
                            if ":" in com_text:
                                split_com = str.split(com_text, ": ")
                                actions_result += f"\n<b>{split_com[0]}:</b> <code>{split_com[1]}</code>"
                            else:
                                actions_result += f"\n        {telebot.formatting.hitalic(com_text)}"

                text_result += f"<b>–ó–∞–ø–∏—Ç: <code>{request_card['name']}</code> (<code>{request_card['id']}</code>)</b>\n\n"

                text_result += f"<b>–°—Ç–∞—Ç—É—Å:</b> {config.REQUESTS_EMOJIS[request_card['labels'][0]['id']]}\n\n"

                q_user, a_user = bot.get_chat_member(chat_id=int(request_card['name']), user_id=int(request_card['name'])), None
                if request_card['desc'] != "":
                   a_user = bot.get_chat_member(chat_id=int(request_card['desc']), user_id=int(request_card['desc']))

                text_result += f"<b>–ó–∞–ø–∏—Ç—É—é—á–∏–π:</b> <code>{q_user.user.last_name} {q_user.user.first_name}</code> (<code>@{q_user.user.username}</code>, <code>{q_user.user.id}</code>)"
                text_result += "\n"

                if (request_card['labels'][0]['id'] == config.TRELLO_CONFIG["Labels"]["Request_Waiting"]) or not a_user:
                    text_result += f"<b>–í—ñ–¥–ø–æ–≤—ñ–¥–∞—á:</b> <i>–í—ñ–¥—Å—É—Ç–Ω—ñ–π</i>"
                else:
                    text_result += f"<b>–í—ñ–¥–ø–æ–≤—ñ–¥–∞—á:</b> <code>{a_user.user.last_name} {a_user.user.first_name}</code> (<code>@{a_user.user.username}</code>, <code>{a_user.user.id}</code>)"

                text_result += f"\n\n{actions_result}"

                if Args["update_message"]:
                        bot.edit_message_text(chat_id=method.from_user.id, message_id=Args["update_message"], text=text_result, reply_markup=telebot.util.quick_markup(buttons, row_width=1), parse_mode="HTML")
                else:
                    bot.send_message(chat_id=method.from_user.id, text=text_result, reply_markup=telebot.util.quick_markup(buttons, row_width=1), parse_mode="HTML")
            else:
                bot.answer_callback_query(method.id, "üö´")
        except:
            bot.answer_callback_query(method.id, "–°—Ö–æ–∂–µ –Ω—ñ—è–∫–∏—Ö –∑–º—ñ–Ω –Ω–µ –±—É–ª–æ.")

        time.sleep(2)
        TEMPORARY_LISTS["admission_management_debounce"] = False

    elif "open_admission_request" in pseudo_action:
        if TEMPORARY_LISTS["admission_management_debounce"] == True:
            bot.answer_callback_query(method.id, "–ù–µ —Ç–∞–∫ —à–≤–∏–¥–∫–æ...")
            return
        TEMPORARY_LISTS["admission_management_debounce"] = True

        card_id = str.split(pseudo_action, "_")[3]
        request_card = trello.cards.get(card_id_or_shortlink=card_id)

        if check_on_admission(method.from_user.id)[1] == True:
            if request_card['labels'][0]['id'] != config.TRELLO_CONFIG["Labels"]["Request_Waiting"]:
                bot.answer_callback_query(method.id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è.")
            else:
                if request_card['desc'] == "":
                    trello.cards.delete_idLabel_idLabel(card_id_or_shortlink=card_id, idLabel=config.TRELLO_CONFIG["Labels"]["Request_Waiting"])
                    trello.cards.update(card_id_or_shortlink=card_id, desc=str(method.from_user.id), idLabels=[config.TRELLO_CONFIG["Labels"]["Request_Conversation"]])
                    trello.cards.new_action_comment(card_id_or_shortlink=card_id, text="–ü–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ.")

                    bot.send_message(chat_id=int(request_card['name']), text="<i>–ü–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ. –ú–æ–∂–µ—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å.</i>", parse_mode="HTML")
                    bot.send_message(chat_id=method.from_user.id, text="<i>–ü–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ. –ú–æ–∂–µ—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å.</i>", parse_mode="HTML")

                    bot.answer_callback_query(method.id, "–ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–æ.")
                else:
                    bot.answer_callback_query(method.id, "–ù–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è –≤–∂–µ —Ö—Ç–æ—Å—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î.")
        else:
            bot.answer_callback_query(method.id, "/start_admission_job")

        time.sleep(2)
        TEMPORARY_LISTS["admission_management_debounce"] = False

    elif "wait_admission_request" in pseudo_action:
        if TEMPORARY_LISTS["admission_management_debounce"] == True:
            bot.answer_callback_query(method.id, "–ù–µ —Ç–∞–∫ —à–≤–∏–¥–∫–æ...")
            return
        TEMPORARY_LISTS["admission_management_debounce"] = True

        card_id = str.split(pseudo_action, "_")[3]
        request_card = trello.cards.get(card_id_or_shortlink=card_id)

        if check_on_admission(method.from_user.id)[1] == True:
            if request_card['labels'][0]['id'] == config.TRELLO_CONFIG["Labels"]["Request_Waiting"]:
                bot.answer_callback_query(method.id, "–ü–∏—Ç–∞–Ω–Ω—è –≤–∂–µ –Ω–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ.")
            else:
                if request_card['desc'] == str(method.from_user.id):
                    trello.cards.delete_idLabel_idLabel(card_id_or_shortlink=card_id, idLabel=config.TRELLO_CONFIG["Labels"]["Request_Conversation"])
                    trello.cards.update(card_id_or_shortlink=card_id, desc="", idLabels=[config.TRELLO_CONFIG["Labels"]["Request_Waiting"]])
                    trello.cards.new_action_comment(card_id_or_shortlink=card_id, text="–ü–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.")

                    bot.send_message(chat_id=int(request_card['name']), text="<i>–ü–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.</i>", parse_mode="HTML")
                    bot.send_message(chat_id=method.from_user.id, text="<i>–ü–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.</i>", parse_mode="HTML")

                    bot.answer_callback_query(method.id, "–ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–æ.")
                else:
                    bot.answer_callback_query(method.id, "–ù–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è –≤–∂–µ —Ö—Ç–æ—Å—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î.")
        else:
            bot.answer_callback_query(method.id, "/start_admission_job")

        time.sleep(2)
        TEMPORARY_LISTS["admission_management_debounce"] = False

    elif "close_admission_request" in pseudo_action:
        if TEMPORARY_LISTS["admission_management_debounce"] == True:
            bot.answer_callback_query(method.id, "–ù–µ —Ç–∞–∫ —à–≤–∏–¥–∫–æ...")
            return
        TEMPORARY_LISTS["admission_management_debounce"] = True

        card_id = str.split(pseudo_action, "_")[3]
        request_card = trello.cards.get(card_id_or_shortlink=card_id)
        is_admission_user = check_on_admission(user.id)[0]

        def process():
            trello.cards.delete_idLabel_idLabel(card_id_or_shortlink=card_id,
                                                idLabel=config.TRELLO_CONFIG["Labels"]["Request_Conversation"])
            trello.cards.update(card_id_or_shortlink=card_id,
                                idLabels=[config.TRELLO_CONFIG["Labels"]["Request_Closed"]])
            trello.cards.new_action_comment(card_id_or_shortlink=card_id, text="–ü–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –∑–∞–∫—Ä–∏—Ç–æ.")
            bot.send_message(chat_id=int(request_card['name']), text="<i>–ü–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –∑–∞–∫—Ä–∏—Ç–æ.</i>", parse_mode="HTML")
            if request_card['desc'] != "":
                bot.send_message(chat_id=int(request_card['desc']), text="<i>–ü–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –∑–∞–∫—Ä–∏—Ç–æ.</i>",
                                 parse_mode="HTML")
            bot.answer_callback_query(method.id, "–ü–∏—Ç–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ.")

        if request_card['labels'][0]['id'] == config.TRELLO_CONFIG["Labels"]["Request_Closed"]:
            bot.answer_callback_query(method.id, "–ü–∏—Ç–∞–Ω–Ω—è –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–æ.")
        else:
            if (int(request_card['name']) == user.id):
                process()
            elif ((request_card['desc'] == str(user.id)) and is_admission_user):
                if check_on_admission(method.from_user.id)[1] == True:
                    process()
                else:
                    bot.answer_callback_query(method.id, "/start_admission_job")
            else:
                bot.answer_callback_query(method.id, "–í–∏ –Ω–µ –º–∞—î—Ç–µ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑—Ä–æ–±–∏—Ç–∏ —Ü—é –¥—ñ—é.")


        time.sleep(2)
        TEMPORARY_LISTS["admission_management_debounce"] = False

    elif "admission_requests" in pseudo_action:
        if TEMPORARY_LISTS["admission_management_debounce"] == True:
            bot.reply_to(message=method, text="–ó–∞—á–µ–∫–∞–π—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞...")
            return
        TEMPORARY_LISTS["admission_management_debounce"] = True

        if check_on_admission(user.id)[0]:
            includes_closed_requests = "+closed" in method.text
            list_buttons = {}

            requests_history = trello.lists.get_card(idList=config.TRELLO_CONFIG["Lists"]["AdmissionRequests"])
            for request_card in requests_history:
                status_label = request_card['labels'][0]
                emoji = config.REQUESTS_EMOJIS[status_label['id']]
                label_id = status_label['id']
                actions_amount = request_card['badges']['comments']
                if label_id == config.TRELLO_CONFIG["Labels"]["Request_Closed"]:
                    if includes_closed_requests:
                        list_buttons[f"[{emoji}] {request_card['name']} ({actions_amount} –¥—ñ–π)"] = {"callback_data": f"request_info_{request_card['id']}"}
                else:
                    list_buttons[f"[{emoji}] {request_card['name']} ({actions_amount} –¥—ñ–π)"] = {
                        "callback_data": f"request_info_{request_card['id']}"}

            markup = telebot.util.quick_markup(list_buttons, row_width=1)
            bot.send_message(chat_id=method.from_user.id, text="<b>–û—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å—ñ–≤:</b>", reply_markup=markup,
                             parse_mode="HTML")
        else:
            bot.reply_to(message=method, text="üö´")

        time.sleep(2)
        TEMPORARY_LISTS["admission_management_debounce"] = False

    elif pseudo_action == "start_admission_job":
        if TEMPORARY_LISTS["admission_management_debounce"] == True:
            bot.reply_to(message=method, text="–ó–∞—á–µ–∫–∞–π—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞...")
            return
        TEMPORARY_LISTS["admission_management_debounce"] = True

        user_card = check_on_admission(user.id)[0]

        if user_card:
            is_already_active = False

            for l in user_card["labels"]:
                if l["id"] == config.TRELLO_CONFIG["Labels"]["Admission_Active"]:
                    is_already_active = True

            if is_already_active:
                bot.reply_to(message=method, text="–í–∏ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
            else:
                new_name = user_card['desc']
                if new_name == None or new_name == "":
                    new_name = f"{user.last_name} {user.first_name}"
                trello.cards.update(card_id_or_shortlink=user_card["id"], desc=new_name, idLabels=[config.TRELLO_CONFIG["Labels"]["Admission_Active"]])
                bot.send_message(chat_id=user.id, text=f"–í–∏ —Ç–µ–ø–µ—Ä –∞–∫—Ç–∏–≤–Ω—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —è–∫ <code>{new_name}</code>.\n–í–≤–µ–¥—ñ—Ç—å /admission_requests –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–ø—Ä–æ—Å—ñ–≤.\n–í–≤–µ–¥—ñ—Ç—å /end_admission_job –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.", parse_mode="HTML")

        else:
            bot.reply_to(message=method, text="üö´")

        time.sleep(2)
        TEMPORARY_LISTS["admission_management_debounce"] = False

    elif pseudo_action == "end_admission_job":
        if TEMPORARY_LISTS["admission_management_debounce"] == True:
            bot.reply_to(message=method, text="–ó–∞—á–µ–∫–∞–π—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞...")
            return
        TEMPORARY_LISTS["admission_management_debounce"] = True

        user_card = check_on_admission(user.id)[0]

        if user_card:
            is_already_active = False

            for l in user_card["labels"]:
                if l["id"] == config.TRELLO_CONFIG["Labels"]["Admission_Active"]:
                    is_already_active = True

            if is_already_active:
                # trello.cards.update(card_id_or_shortlink=user_card["id"], idLabels=[])
                trello.cards.delete_idLabel_idLabel(card_id_or_shortlink=user_card["id"], idLabel=config.TRELLO_CONFIG["Labels"]["Admission_Active"])
                bot.reply_to(message=method, text="–í–∏ —Ç–µ–ø–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
            else:
                bot.reply_to(message=method, text="–í–∏ –π —Ç–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")

        else:
            bot.reply_to(message=method, text="üö´")

        time.sleep(2)
        TEMPORARY_LISTS["admission_management_debounce"] = False

    elif pseudo_action == "subscribe":
        if TEMPORARY_LISTS["change_news_subscription"] == True:
            bot.answer_callback_query(method.id, "–ó–∞—á–µ–∫–∞–π—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞...")
            return
        TEMPORARY_LISTS["change_news_subscription"] = True

        have_subscription = None

        users = trello.lists.get_card(idList=config.TRELLO_CONFIG["Lists"]["NewsSubscribers"])
        for user_card in users:
            user_id = int(user_card["name"])
            if user_id == method.from_user.id:
                have_subscription = user_card["id"]

        if have_subscription:
            bot.answer_callback_query(method.id, "–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É")
        else:
            trello.cards.new(name=str(method.from_user.id), idList=config.TRELLO_CONFIG["Lists"]["NewsSubscribers"])
            bot.answer_callback_query(method.id, "–ü—ñ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –Ω–æ–≤–∏–Ω")

        time.sleep(5)
        TEMPORARY_LISTS["change_news_subscription"] = False

    elif pseudo_action == "unsubscribe":
        if TEMPORARY_LISTS["change_news_subscription"] == True:
            bot.answer_callback_query(method.id, "–ó–∞—á–µ–∫–∞–π—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞...")
            return
        TEMPORARY_LISTS["change_news_subscription"] = True

        is_have_changes = False

        users = trello.lists.get_card(idList=config.TRELLO_CONFIG["Lists"]["NewsSubscribers"])
        for user_card in users:
            user_id = int(user_card["name"])
            if user_id == method.from_user.id:
                trello.cards.delete(card_id_or_shortlink=user_card["id"])
                is_have_changes = True

        if is_have_changes:
            bot.answer_callback_query(method.id, "–†–æ–∑—Å–∏–ª–∫–∞ –Ω–æ–≤–∏–Ω –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–∞")
        else:
            bot.answer_callback_query(method.id, "–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É")

        time.sleep(5)
        TEMPORARY_LISTS["change_news_subscription"] = False

    elif pseudo_action == "feedback":
        if TEMPORARY_LISTS["feedback_debounce"] == True:
            bot.reply_to(message=method, text=telebot.formatting.hitalic("–ù–µ —Ç–∞–∫ —à–≤–∏–¥–∫–æ..."), parse_mode="HTML")
            return
        TEMPORARY_LISTS["feedback_debounce"] = True

        if check_on_feedback(method.from_user.id):
            bot.reply_to(message=method,
                         text=telebot.formatting.hitalic("–í–∏ –≤–∂–µ –º–∞—î—Ç–µ –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫."),
                         parse_mode="HTML")

        else:
            inline_buttons, button_index = {}, 0

            for info in config.FEEDBACK_VARIANTS:
                inline_buttons[info[1]] = {"callback_data": f"feedback_type_{info[0]}_{button_index}"}
                button_index += 1

            inline_buttons["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå"] = {"callback_data": "cancel_feedback"}

            feedback_markup = telebot.util.quick_markup(inline_buttons, row_width=1)
            new_message = bot.send_message(chat_id=method.from_user.id,
                                           text="–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É, –Ω–∞ —è–∫—É —Ö–æ—á–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –¥—ñ—é.",
                                           reply_markup=feedback_markup)
            TEMPORARY_LISTS["wait_to_feedback"].append([method.from_user.id, new_message.message_id, None, None])

        time.sleep(1)
        TEMPORARY_LISTS["feedback_debounce"] = False

    elif pseudo_action == "permissions":
        if TEMPORARY_LISTS["isadmin_debounce"]:
            bot.reply_to(message=method, text=telebot.formatting.hitalic("–ù–µ —Ç–∞–∫ —à–≤–∏–¥–∫–æ..."), parse_mode="HTML")
            return
        TEMPORARY_LISTS["isadmin_debounce"] = True

        result_text = ""

        result_text += "<b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä:</b> "
        if check_on_admin(method.from_user.id):
            result_text += "‚úÖ\n/share_new"
        else:
            result_text += "‚ùå"

        result_text += "\n<b>–ü—Ä–∏–π–º–∞–ª—å–Ω–∞ –∫–æ–º—ñ—Å—ñ—è:</b> "
        if check_on_admission(method.from_user.id)[0]:
            result_text += "‚úÖ\n/admission_requests (+closed)\n/start_admission_job\n/end_admission_job"
        else:
            result_text += "‚ùå"

        bot.reply_to(message=method, text=result_text, parse_mode="HTML")

        time.sleep(2)
        TEMPORARY_LISTS["isadmin_debounce"] = False

    elif pseudo_action == "sharenew":
        if TEMPORARY_LISTS["sharenew_debounce"] == True:
            bot.reply_to(message=method, text=telebot.formatting.hitalic("–ù–µ —Ç–∞–∫ —à–≤–∏–¥–∫–æ..."), parse_mode="HTML")
            return
        TEMPORARY_LISTS["sharenew_debounce"] = True

        if check_on_admin(method.from_user.id):
            articles_for_share, inline_buttons = trello.lists.get_card(idList=config.TRELLO_CONFIG["Lists"]["News"]), {}

            for new_card in articles_for_share:
                split_name = str.split(new_card["name"], "/")
                date, title = split_name[0], split_name[1]

                inline_buttons[f"[{date}] {title}"] = {"callback_data": f"share_new_{new_card['id']}"}

            inline_buttons["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå"] = {"callback_data": "cancel_sharenew"}

            share_markup = telebot.util.quick_markup(inline_buttons, row_width=1)
            new_message = bot.send_message(chat_id=method.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å—é —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ—à–∏—Ä–∏—Ç–∏:",
                                           reply_markup=share_markup)

            TEMPORARY_LISTS["wait_to_sharenew"].append([method.from_user.id, new_message.message_id, None, None, None])

        else:
            bot.reply_to(message=method, text="üö´")

        time.sleep(1)
        TEMPORARY_LISTS["sharenew_debounce"] = False


def share_new(card_id):
    new_card = trello.cards.get(card_id_or_shortlink=card_id)
    users = trello.lists.get_card(idList=config.TRELLO_CONFIG["Lists"]["NewsSubscribers"])

    split_name = str.split(new_card["name"], "/")
    date, title = split_name[0], split_name[1]

    markup = share_markup = telebot.util.quick_markup({"üõë –ó—É–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É üõë": {"callback_data": "unsubscribe"}}, row_width=1)

    for user_card in users:
        user_id = int(user_card["name"])
        telebot.util.antiflood(bot.send_message, chat_id=user_id, text=f"{telebot.formatting.hlink(content=title, url=new_card['cover']['scaled'][5]['url'])} [{telebot.formatting.hitalic(date)}]\n\n{str(new_card['desc'])}", parse_mode="HTML", reply_markup=markup)


def check_on_active_request(user_id, include_waiting):
    requests = trello.lists.get_card(idList=config.TRELLO_CONFIG["Lists"]["AdmissionRequests"])
    for card in requests:
        card_user_id = int(card['name'])
        if card_user_id == user_id:
            if include_waiting:
                if (card['labels'][0]['id'] == config.TRELLO_CONFIG["Labels"]["Request_Conversation"]) or (card['labels'][0]['id'] == config.TRELLO_CONFIG["Labels"]["Request_Waiting"]):
                    return card
            else:
                if card['labels'][0]['id'] == config.TRELLO_CONFIG["Labels"]["Request_Conversation"]:
                    return card

def check_on_sharenew(user_id):
    for info in TEMPORARY_LISTS["wait_to_sharenew"]:
        if info[0] == user_id:
            return info


def check_on_feedback(user_id):
    for info in TEMPORARY_LISTS["wait_to_feedback"]:
        if info[0] == user_id:
            return info


def check_on_admin(user_id):
    admin_users = trello.lists.get_card(idList=config.TRELLO_CONFIG["Lists"]["Admins"])

    for card in admin_users:
        if int(card["name"]) == user_id:
            return card

    return False


def check_on_admission(user_id):
    admin_users = trello.lists.get_card(idList=config.TRELLO_CONFIG["Lists"]["Admission"])

    for card in admin_users:
        if int(card["name"]) == user_id:
            is_active = False
            if len(card['labels']) > 0:
                is_active = True
            return card, is_active

    return False, False


def check_on_opendoors_reg(user_id):
    for info in TEMPORARY_LISTS["open_doors_registration"]:
            if info[0] == user_id:
                return info
    return False

def check_on_courses_reg(user_id):
    for info in TEMPORARY_LISTS["courses_registration"]:
            if info[0] == user_id:
                return info
    return False


@bot.message_handler(commands=["perms", "check_permissions", "permissions"])
def check_permissions(message: telebot.types.Message):
    start_actions(message.from_user, "permissions", message, {})


@bot.message_handler(commands=["start"])
def send_help(message: telebot.types.Message):
    if message.message_id <= 1:
        bot.send_message(chat_id=message.chat.id, text=config.MESSAGES["start"], parse_mode="HTML")
    start_actions(message.from_user, "start_message", message, {})


@bot.message_handler(commands=["admission_requests", "admission_requests+closed"])
def send_help(message: telebot.types.Message):
    start_actions(message.from_user, "admission_requests", message, {})


@bot.message_handler(commands=["start_admission_job"])
def send_help(message: telebot.types.Message):
    start_actions(message.from_user, "start_admission_job", message, {})


@bot.message_handler(commands=["end_admission_job"])
def send_help(message: telebot.types.Message):
    start_actions(message.from_user, "end_admission_job", message, {})


@bot.message_handler(commands=["site"])
def send_dev_name(message):
    bot.reply_to(message=message, text=config.COLLEGE_SITE)


@bot.message_handler(commands=["news", "news_list"])
def send_dev_name(message):
    start_actions(message.from_user, "news_list", message, {})


@bot.message_handler(commands=["feedback", "report"])
def feedback(message: telebot.types.Message):
    start_actions(message.from_user, "feedback", message, {})


@bot.message_handler(commands=["share_new"])
def send_news(message: telebot.types.Message):
    start_actions(message.from_user, "sharenew", message, {})


@bot.message_handler(func=lambda message: True)
def every_message(message: telebot.types.Message):
    print(message.from_user.username, "message", message.text)

    checked_on_admission = check_on_admission(message.from_user.id)[0]
    checked_on_feedback = check_on_feedback(message.from_user.id)
    checked_on_active_request = check_on_active_request(message.from_user.id, False)
    checked_on_opendoors_reg = check_on_opendoors_reg(message.from_user.id)
    checked_on_courses_reg = check_on_courses_reg(message.from_user.id)

    if checked_on_courses_reg:
        if checked_on_courses_reg[1] == True:
            if checked_on_courses_reg[2] == None:
                new_text = str(message.text).replace(" ", "")

                if len(new_text) <= 15:
                    checked_on_courses_reg[2] = new_text
                    bot.send_message(chat_id=message.chat.id, text=f"–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è:")

                else: bot.reply_to(message=message, text="–ù–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª—ñ–≤.")

            elif checked_on_courses_reg[3] == None:
                splitted = str(message.text).split(" ")

                if len(message.text) <= 35:
                    if len(splitted) == 2:
                        checked_on_courses_reg[3] = message.text

                        markup = telebot.util.quick_markup({ "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ": {"callback_data": "courses_register_accept2"}, "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ üö´": {"callback_data": "courses_register_decline"} }, row_width=2)
                        bot.send_message(chat_id=message.chat.id, text=f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤—á–∏—Ö –∫—É—Ä—Å–∞—Ö? <code>{checked_on_courses_reg[2]}</code>, <code>{checked_on_courses_reg[3]}</code>", reply_markup=markup, parse_mode="HTML")

                    else: bot.reply_to(message=message, text="–í –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—ñ –º–∞—î –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ —ñ–º'—è —ñ —Ñ–∞–º—ñ–ª—ñ—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª.")
                    

                else: bot.reply_to(message=message, text="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 35 —Å–∏–º–≤–æ–ª—ñ–≤.")

    if checked_on_opendoors_reg:
        if checked_on_opendoors_reg[1] == True:
            if checked_on_opendoors_reg[2] == None:
                new_text = str(message.text).replace(" ", "")

                if len(new_text) <= 15:
                    checked_on_opendoors_reg[2] = new_text
                    bot.send_message(chat_id=message.chat.id, text=f"–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è:")

                else: bot.reply_to(message=message, text="–ù–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª—ñ–≤.")

            elif checked_on_opendoors_reg[3] == None:
                splitted = str(message.text).split(" ")

                if len(message.text) <= 35:
                    if len(splitted) == 2:
                        checked_on_opendoors_reg[3] = message.text

                        day_info = config.OPEN_DOORS_DAYS_DATES[config.ACTUAL_OPEN_DOORS_DAY-1]

                        markup = telebot.util.quick_markup({ "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ": {"callback_data": "open_doors_register_accept2"}, "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ üö´": {"callback_data": "open_doors_register_decline"} }, row_width=2)
                        bot.send_message(chat_id=message.chat.id, text=f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π –î–µ–Ω—å –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–≤–µ—Ä–µ–π? <code>{day_info[0]} - {day_info[1]}</code>, <code>{checked_on_opendoors_reg[2]}</code>, <code>{checked_on_opendoors_reg[3]}</code>", reply_markup=markup, parse_mode="HTML")

                    else: bot.reply_to(message=message, text="–í –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—ñ –º–∞—î –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ —ñ–º'—è —ñ —Ñ–∞–º—ñ–ª—ñ—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª.")
                    

                else: bot.reply_to(message=message, text="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 35 —Å–∏–º–≤–æ–ª—ñ–≤.")

    if checked_on_active_request:
        admission_reply_markup = telebot.util.quick_markup({"üö´ –ó–∞–∫—Ä–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è üö´": {"callback_data": f"close_admission_request_{checked_on_active_request['id']}"}})
        bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id, reaction=[telebot.types.ReactionTypeEmoji("üëç")], is_big=False)
        bot.send_message(chat_id=int(checked_on_active_request['desc']), text=f"<b>{message.from_user.first_name}:</b> <code>{message.text}</code>", reply_markup=admission_reply_markup, parse_mode="HTML")
        trello.cards.new_action_comment(card_id_or_shortlink=checked_on_active_request['id'], text=f"{message.from_user.first_name}: {message.text}")

    if checked_on_admission:
        for card in trello.lists.get_card(idList=config.TRELLO_CONFIG['Lists']['AdmissionRequests']):
            if card["labels"][0]['id'] == config.TRELLO_CONFIG['Labels']['Request_Conversation'] and card['desc'] == checked_on_admission['name']:
                admission_reply_markup = telebot.util.quick_markup({"‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –≤–∏—Ä—ñ—à–µ–Ω–æ ‚úÖ": {"callback_data": f"close_admission_request_{card['id']}"}})
                bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id,
                                         reaction=[telebot.types.ReactionTypeEmoji("üëç")], is_big=False)
                bot.send_message(chat_id=int(card['name']), text=f"<b>{checked_on_admission['desc']}:</b> <code>{message.text}</code>", reply_markup=admission_reply_markup, parse_mode="HTML")
                trello.cards.new_action_comment(card_id_or_shortlink=card['id'], text=f"{checked_on_admission['desc']}: {message.text}")
                break

    if checked_on_feedback and checked_on_feedback[2] != None:
        user = message.from_user
        chat_id = checked_on_feedback[0]
        message_id = checked_on_feedback[1]
        feedback_type = checked_on_feedback[2]
        str_feedback_type = checked_on_feedback[3]

        user_link = f"https://t.me/{user.username}"
        user_info = f"@{user.username} ({user.id}) | {user.last_name} {user.first_name}"
        feedback_text = message.text


        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=f"–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.\n–¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: `{str_feedback_type}`\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: `{feedback_text}`", parse_mode="Markdown")
        bot.send_message(chat_id=config.DEVELOPER_USER_ID, text=f"‚ùó**–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫:**\n**–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** `{user_info}` | {user_link}\n–¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: `{str_feedback_type}`\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: `{feedback_text}`", parse_mode="Markdown")

        trello.cards.new(name=user_info, desc=feedback_text, idList=config.TRELLO_CONFIG["Lists"]["Feedbacks"], urlSource=user_link, pos=0, idLabels=[config.TRELLO_CONFIG["Labels"][f"Feedback_Type_{feedback_type}"]])

        for waiting in TEMPORARY_LISTS["wait_to_feedback"]:
            if waiting[0] == message.from_user.id:
                TEMPORARY_LISTS["wait_to_feedback"].remove(waiting)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call: telebot.types.CallbackQuery):
    print(call.from_user.username, "call", call.data)

    if call.data == "feedback":
        start_actions(call.from_user, "feedback", call, {})
        bot.answer_callback_query(call.id, "–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫.")

    elif call.data == "admission_info":
        start_actions(call.from_user, "admission_info", call, {})
        bot.answer_callback_query(call.id, "–ü—Ä–∏–π–º–∞–ª—å–Ω–∞ –∫–æ–º—ñ—Å—ñ—è.")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == "open_doors_days":
        start_actions(call.from_user, "open_doors_days", call, {})
        bot.answer_callback_query(call.id, "–î–µ–Ω—å –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–≤–µ—Ä–µ–π.")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == "subscribe":
        start_actions(call.from_user, "subscribe", call, {})

    elif call.data == "unsubscribe":
        start_actions(call.from_user, "unsubscribe", call, {})

    elif call.data == "enter_college":
        start_actions(call.from_user, call.data, call, {})
        bot.answer_callback_query(call.id, "–î–µ–Ω—å –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–≤–µ—Ä–µ–π.")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == "to_start":
        start_actions(call.from_user, "start_message", call, {})
        bot.answer_callback_query(call.id, "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å.")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == "delete_it":
        bot.answer_callback_query(call.id, "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å.")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


    elif call.data == "stud_rada":
        bot.answer_callback_query(call.id, "–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∞ —Ä–∞–¥–∞.")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        
        buttons = {}
        buttons["–°–∫–ª–∞–¥ —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–æ—ó —Ä–∞–¥–∏"] = {"callback_data": "stud_rada_sklad"}
        buttons["–ù–æ–≤–∏–Ω–Ω–∏–π –∫–∞–Ω–∞–ª —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–æ—ó —Ä–∞–¥–∏"] = {"callback_data": "stud_rada_channel"}
        buttons["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è"] = {"callback_data": "to_start"}
        markup = telebot.util.quick_markup(buttons, row_width=1)

        bot.send_message(chat_id=call.from_user.id, text=config.MESSAGES["stud_rada"], reply_markup=markup, parse_mode="HTML")

    elif "stud_rada_" in call.data:
        bot.answer_callback_query(call.id, "–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∞ —Ä–∞–¥–∞.")
        
        buttons = {}
        buttons["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è"] = {"callback_data": "delete_it"}
        markup = telebot.util.quick_markup(buttons, row_width=1)

        text_lol = ""
        version = str(call.data).split("_")[2]
        if version == "sklad": text_lol = "<i><b>26 –∂–æ–≤—Ç–Ω—è 2023 —Ä–æ–∫—É</b> –≤—ñ–¥–±—É–ª–∏—Å—è –∑–±–æ—Ä–∏ –°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–æ—ó –†–∞–¥–∏ –Ω–∞—à–æ–≥–æ –∫–æ–ª–µ–¥–∂—É, –¥–µ –±—É–ª–æ –ø—Ä–∏–π–Ω—è—Ç–æ –≤–∞–∂–ª–∏–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–∞–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫—ñ–≤, —è–∫—ñ –±—É–¥—É—Ç—å —Å–ø—Ä–∏—è—Ç–∏ —Ä–æ–∑–≤–∏—Ç–∫—É —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–æ–≥–æ –∂–∏—Ç—Ç—è.</i>\n\n<b>–ì–æ–ª–æ–≤–∞:</b>\n<code>–ö–∞–º–ª—É–∫ –ê—Ä—Ç–µ–º</code>\n\n<b>–ó–∞—Å—Ç—É–ø–Ω–∏–∫ –≥–æ–ª–æ–≤–∏:</b>\n<code>–ö–æ—á–∞—Ä—è–Ω –ö–∞—Ä–µ–Ω</code>\n\n<b>–°–µ–∫—Ä–µ—Ç–∞—Ä:</b>\n<code>–°–æ—à–µ–Ω–∫–æ–≤ –ú–∏–∫–∏—Ç–∞</code>\n\n<b>–ö–æ–º—ñ—Ç–µ—Ç –æ—Å–≤—ñ—Ç–∏ —ñ –Ω–∞—É–∫–∏:</b>\n<code>–î—Ä–æ–≥—É–ª—å –í–ª–∞–¥–∏—Å–ª–∞–≤</code>\n\n<b>–ö–æ–º—ñ—Ç–µ—Ç –ø—Ä–µ—Å-—Ü–µ–Ω—Ç—Ä—É, —Å–æ—Ü—ñ–∞–ª—å–Ω–æ-–ø—Ä–∞–≤–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å —Ç–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö —Å–ø—Ä–∞–≤:</b>\n<code>–ö–æ–≤–∞–ª–µ–Ω–∫–æ –ú–∞–∫—Å–∏–º</code>, <code>–õ–µ—Ç–∞ –¢–∏–º—É—Ä</code>\n\n<b>–ö–æ–º—ñ—Ç–µ—Ç —Å–ø–æ—Ä—Ç—É —Ç–∞ –∑–¥–æ—Ä–æ–≤'—è:</b>\n<code>–†—É–±–∞–Ω–æ–≤ –ë–æ–≥–¥–∞–Ω</code>, <code>–Ñ—Ñ—ñ–º–æ–≤ –û–ª–µ–∫—Å–∞–Ω–¥—Ä</code>, <code>–í–ª–∞—Å–µ–Ω–∫–æ –û–ª–µ–∫—Å—ñ–π</code>\n\n<b>–ö–æ–º—ñ—Ç–µ—Ç —Ç—É—Ä–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ç–∞ —Ö—É–¥–æ–∂–Ω—å–æ-–µ—Å—Ç–µ—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–º—ñ–≤:</b>\n<code>–ö–æ—á–∞—Ä—è–Ω –ö–∞—Ä–µ–Ω</code>, <code>–°–∫–∞—Ä–ª–æ—à –î–∞–Ω–∏–ª–æ</code>, <code>–ö–æ–≤–∞–ª–µ–Ω–∫–æ –î–º–∏—Ç—Ä–æ</code>"
        elif version == "channel": text_lol = "https://t.me/+XQwI9xC5rucwMjQy"

        bot.send_message(chat_id=call.from_user.id, text=text_lol, reply_markup=markup, parse_mode="HTML")


    elif "request_info" in call.data:
        start_actions(call.from_user, call.data, call, {"update_message": False})

    elif "close_admission_request" in call.data:
        start_actions(call.from_user, call.data, call, {})

    elif "open_admission_request" in call.data:
        start_actions(call.from_user, call.data, call, {})

    elif "wait_admission_request" in call.data:
        start_actions(call.from_user, call.data, call, {})

    elif "update_admission_request" in call.data:
        card_id = str.split(call.data, '_')[3]
        start_actions(call.from_user, f"request_info_{card_id}", call, {"update_message": call.message.message_id})

    elif "enter_college_" in call.data:
        bot.answer_callback_query(call.id, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—Å—Ç—É–ø.")

        version = str(call.data).split("_")[2]
        text_lol = ""
        if version == "predmets": text_lol = "–ü–µ—Ä–µ–ª—ñ–∫ –∫–æ–Ω–∫—É—Ä—Å–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤: \n<b>–ë–∞–∑–∞ 9 –∫–ª–∞—Å—ñ–≤(–ë–°–û):</b> \n—ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ —É—Å–Ω–∞ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∞ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ —Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ \n<b>–ë–∞–∑–∞ 11 –∫–ª–∞—Å—ñ–≤(–ü–ó–°–û, –ö–†):</b> \n—ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ —É—Å–Ω–∞ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∞ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ —Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏. \n–ó–∞–º—ñ—Å—Ç—å –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏ –¥–ª—è –≤—Å—Ç—É–ø—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ü–ó–°–û, –ö–† –≤—Å—Ç—É–ø–Ω–∏–∫ –º–æ–∂–µ –ø–æ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: \n - –ó–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ–≥–æ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è 2020-2021 —Ä–æ–∫—ñ–≤ —É –±—É–¥—å-—è–∫–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è—Ö \n - –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º—É–ª—å—Ç–∏–ø—Ä–µ–¥–º–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ 2022 —Ä–æ–∫—É; \n - –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º—É–ª—å—Ç–∏–ø—Ä–µ–¥–º–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ 2023 —Ä–æ–∫—É."
        elif version == "rules": text_lol = "https://pk.kre.dp.ua/–ø–æ—Ä—è–¥–æ–∫-—Ç–∞-–ø—Ä–∞–≤–∏–ª–∞-–ø—Ä–∏–π–æ–º—É"
        elif version == "documents": text_lol = "<b>–ü–µ—Ä–µ–ª—ñ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–æ–¥–∞—á—ñ (—É –≤–∏–ø–∞–¥–∫—É –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è):</b> \n - 6 –∫–æ–ª—å–æ—Ä–æ–≤–∏—Ö —Ñ–æ—Ç–æ–∫–∞—Ä—Ç–æ–∫ —Ä–æ–∑–º—ñ—Ä–æ–º 3√ó4 —Å–º; \n - –ø—ñ–ª—å–≥–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ (–¥–æ–∫—É–º–µ–Ω—Ç–∏, —â–æ–¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—ñ–ª—å–≥); \n - —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞; \n - –º–µ–¥–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ (—Ñ–æ—Ä–º–∞ 086-–û); \n - –¥–æ–≤—ñ–¥–∫–∞ –ø—Ä–æ —â–µ–ø–ª–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞ 063 (–∫–æ–ø—ñ—è); \n - –µ–ø—ñ–∫—Ä–∏–∑ –Ω–∞ –ø—ñ–¥–ª—ñ—Ç–∫–∞."
        elif version == "seats": text_lol = "–ü–µ—Ä–µ–ª—ñ–∫ –∞–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—Ö –æ—Å–≤—ñ—Ç–Ω—å–æ-–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º —Ç–∞ –∫–æ–Ω–∫—É—Ä—Å–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π, –∑–∞ —è–∫–∏–º–∏ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ø—Ä–∏–π–æ–º –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è, —ñ —ó—Ö –ª—ñ—Ü–µ–Ω–∑—ñ–π–Ω–∏–π –æ–±—Å—è–≥: \n - –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∫–æ–º–ø‚Äô—é—Ç–µ—Ä–Ω–∏—Ö —Å–∏—Å—Ç–µ–º —ñ –º–µ—Ä–µ–∂: 50 –æ—Å—ñ–± (–Ω–∞ –±–∞–∑—ñ –ë–°–û); \n - –∫–æ–Ω—Å—Ç—Ä—É—é–≤–∞–Ω–Ω—è, –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ —Ç–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Ä–∞–¥—ñ–æ—Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤: 65 –æ—Å—ñ–± (–Ω–∞ –±–∞–∑—ñ –ë–°–û) \n - –∫–æ–Ω—Å—Ç—Ä—É—é–≤–∞–Ω–Ω—è, –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –≤–∏—Ä–æ–±—ñ–≤ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏: 25 –æ—Å—ñ–± (–Ω–∞ –±–∞–∑—ñ –ë–°–û); \n - –º–æ–Ω—Ç–∞–∂, —Ç–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —ñ —Ä–µ–º–æ–Ω—Ç –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è —Ä–∞–¥—ñ–æ–∑–≤‚Äô—è–∑–∫—É, —Ä–∞–¥—ñ–æ–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—è: 25 –æ—Å—ñ–± (–Ω–∞ –±–∞–∑—ñ –ë–°–û)."
        elif version == "money": text_lol = "9800 –≥—Ä–Ω / —Ä—ñ–∫ –Ω–∞–≤—á–∞–Ω–Ω—è + –ø–æ–ø—Ä–∞–≤–∫–∏ –Ω–∞ —ñ–Ω—Ñ–ª—è—Ü—ñ—é"
        elif version == "shedule": text_lol = "–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ \n–ø–æ–Ω–µ–¥—ñ–ª–æ–∫ ‚Äì –ø‚Äô—è—Ç–Ω–∏—Ü—è: 09:00 ‚Äì 16:00"

        buttons = {}
        buttons["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è"] = {"callback_data": "delete_it"}
        markup = telebot.util.quick_markup(buttons, row_width=1)

        bot.send_message(chat_id=call.from_user.id, text=text_lol, reply_markup=markup, parse_mode="HTML")

    elif call.data == "specialities":
        bot.answer_callback_query(call.id, "–°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ.")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        start_actions(call.from_user, call.data, call, {})

    elif "specialities_info" in call.data:
        bot.answer_callback_query(call.id, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å.")
        start_actions(call.from_user, call.data, call, {})



    elif call.data == "courses":
        bot.answer_callback_query(call.id, "–ü—ñ–¥–≥–æ—Ç–æ–≤—á—ñ –∫—É—Ä—Å–∏.")
        bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

        buttons = {}
        buttons["üìù –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –≤ –≥—Ä—É–ø—ñ üìù"] = {"callback_data": "courses_register"}
        buttons["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è"] = {"callback_data": "to_start"}
        markup = telebot.util.quick_markup(buttons, row_width=1)
        
        bot.send_message(chat_id=call.from_user.id, text=f"–ì–æ—Ç—É—î–º–æ –¥–æ —É—Å–ø—ñ—à–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞–Ω–Ω—è –≤—Å—Ç—É–ø–Ω–∏—Ö –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω—å –¥–æ –∫–æ–ª–µ–¥–∂—É —Ä–∞–¥—ñ–æ–µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∏ —Ç–∞ —ñ–Ω—à–∏—Ö –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤\n<b>–¢–µ—Ä–º—ñ–Ω –Ω–∞–≤—á–∞–Ω–Ω—è:</b> <code>6 –º—ñ—Å—è—Ü—ñ–≤</code>\nhttps://landing.kre.dp.ua/courses", reply_markup=markup, parse_mode="HTML")

    elif call.data == "courses_register":
        for info in TEMPORARY_LISTS["courses_registration"]:
            if info[0] == call.from_user.id:
                bot.answer_callback_query(call.id, "–í–∏ –≤–∂–µ —Ä–µ—î—Å—Ç—Ä—É—î—Ç–µ—Å—å.")
                return

        for card in trello.lists.get_card(idList=config.TRELLO_CONFIG["Lists"]["Registrations"]):
            if card["labels"][0]["id"] == config.TRELLO_CONFIG["Labels"]["Register_Courses"]:
                if str(call.from_user.id) in card["name"]:
                    bot.answer_callback_query(call.id, "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
                    return
                
        TEMPORARY_LISTS["courses_registration"].append([call.from_user.id, False, None, None])

        bot.answer_callback_query(call.id, "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ.")

        markup = telebot.util.quick_markup({ "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ": {"callback_data": "courses_register_accept"}, "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ üö´": {"callback_data": "courses_register_decline"} }, row_width=2)
        bot.send_message(chat_id=call.from_user.id, text=f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤—á–∏—Ö –∫—É—Ä—Å–∞—Ö?", reply_markup=markup, parse_mode="HTML")

    elif call.data == "courses_register_accept":
        for info in TEMPORARY_LISTS["courses_registration"]:
            if info[0] == call.from_user.id:
                if info[1] == True:
                    bot.answer_callback_query(call.id, "–í–∏ –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏.")
                    return
                else: info[1] = True
            
        bot.answer_callback_query(call.id, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")

        bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        bot.send_message(chat_id=call.from_user.id, text=f"–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

    elif call.data == "courses_register_decline":
        bot.answer_callback_query(call.id, "–°–∫–∞—Å–æ–≤–∞–Ω–æ.")

        for info in TEMPORARY_LISTS["courses_registration"]:
            if info[0] == call.from_user.id:
                TEMPORARY_LISTS["courses_registration"].remove(info)
            

    elif call.data == "courses_register_accept2":
        bot.answer_callback_query(call.id, "–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")

        for info in TEMPORARY_LISTS["courses_registration"]:
            if info[0] == call.from_user.id:
                trello.cards.new(name=f"@{call.from_user.username} ({call.from_user.id}) | {info[2]} | {info[3]}", idList=config.TRELLO_CONFIG["Lists"]["Registrations"], idLabels=[config.TRELLO_CONFIG["Labels"]["Register_Courses"]])
                TEMPORARY_LISTS["courses_registration"].remove(info)

        buttons = {}
        buttons["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è"] = {"callback_data": "to_start"}
        markup = telebot.util.quick_markup(buttons, row_width=1)
        bot.send_message(chat_id=call.from_user.id, text=f"–í–∞—Å –±—É–ª–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.\n–í–∞–º –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—é—Ç—å –ø–æ –≤–∫–∞–∑–∞–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.", reply_markup=markup)

        bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)








    elif call.data == "open_doors_register":
        for info in TEMPORARY_LISTS["open_doors_registration"]:
            if info[0] == call.from_user.id:
                bot.answer_callback_query(call.id, "–í–∏ –≤–∂–µ —Ä–µ—î—Å—Ç—Ä—É—î—Ç–µ—Å—å.")
                return

        for card in trello.lists.get_card(idList=config.TRELLO_CONFIG["Lists"]["Registrations"]):
            if card["labels"][0]["id"] == config.TRELLO_CONFIG["Labels"]["Register_OpenDoors"]:
                if str(call.from_user.id) in card["name"]:
                    bot.answer_callback_query(call.id, "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
                    return
                
        TEMPORARY_LISTS["open_doors_registration"].append([call.from_user.id, False, None, None])

        bot.answer_callback_query(call.id, "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ.")

        day_info = config.OPEN_DOORS_DAYS_DATES[config.ACTUAL_OPEN_DOORS_DAY-1]

        markup = telebot.util.quick_markup({ "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ": {"callback_data": "open_doors_register_accept"}, "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ üö´": {"callback_data": "open_doors_register_decline"} }, row_width=2)
        bot.send_message(chat_id=call.from_user.id, text=f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π –î–µ–Ω—å –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–≤–µ—Ä–µ–π? <code>{day_info[0]} - {day_info[1]}</code>", reply_markup=markup, parse_mode="HTML")

    elif call.data == "open_doors_register_accept":
        for info in TEMPORARY_LISTS["open_doors_registration"]:
            if info[0] == call.from_user.id:
                if info[1] == True:
                    bot.answer_callback_query(call.id, "–í–∏ –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏.")
                    return
                else: info[1] = True
            
        bot.answer_callback_query(call.id, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")

        bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        bot.send_message(chat_id=call.from_user.id, text=f"–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

    elif call.data == "open_doors_register_decline":
        bot.answer_callback_query(call.id, "–°–∫–∞—Å–æ–≤–∞–Ω–æ.")

        for info in TEMPORARY_LISTS["open_doors_registration"]:
            if info[0] == call.from_user.id:
                TEMPORARY_LISTS["open_doors_registration"].remove(info)
            

    elif call.data == "open_doors_register_accept2":
        bot.answer_callback_query(call.id, "–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")

        for info in TEMPORARY_LISTS["open_doors_registration"]:
            if info[0] == call.from_user.id:
                trello.cards.new(name=f"@{call.from_user.username} ({call.from_user.id}) | {info[2]} | {info[3]}", idList=config.TRELLO_CONFIG["Lists"]["Registrations"], idLabels=[config.TRELLO_CONFIG["Labels"]["Register_OpenDoors"]])
                TEMPORARY_LISTS["open_doors_registration"].remove(info)

        buttons = {}
        buttons["üó∫Ô∏è –Ø–∫ –¥–æ–±—Ä–∞—Ç–∏—Å—å üó∫Ô∏è"] = {"callback_data": "college_location"}
        buttons["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è"] = {"callback_data": "to_start"}
        markup = telebot.util.quick_markup(buttons, row_width=1)
        bot.send_message(chat_id=call.from_user.id, text=f"–í–∞—Å –±—É–ª–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.", reply_markup=markup)

        bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)



    elif call.data == "news_list":
        bot.answer_callback_query(call.id, "–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏.")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        start_actions(call.from_user, call.data, call, {})

    elif call.data == "college_location":
        bot.answer_callback_query(call.id, "–õ–æ–∫–∞—Ü—ñ—è.")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        start_actions(call.from_user, call.data, call, {})

    elif call.data == "admission_contact_accept":
        if TEMPORARY_LISTS["admission_management_debounce"] == True:
            bot.answer_callback_query(call.id, "–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞...")
            return
        TEMPORARY_LISTS["admission_management_debounce"] = True

        if check_on_active_request(call.from_user.id, True):
            bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Ç –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ß–µ–∫–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
            return

        card = trello.cards.new(name=str(call.from_user.id), idLabels=[config.TRELLO_CONFIG["Labels"]["Request_Waiting"]], idList=config.TRELLO_CONFIG["Lists"]["AdmissionRequests"])

        bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text="–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è. –ó–∞—á–µ–∫–∞–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ñ–∞—Ö—ñ–≤—Ü—è.", reply_markup=telebot.util.quick_markup({"üö´ –ó–∞–∫—Ä–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è üö´": {"callback_data": f"close_admission_request_{card['id']}"}}))
        bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ß–µ–∫–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")

        for admission_user in trello.lists.get_card(idList=config.TRELLO_CONFIG["Lists"]["Admission"]):
            if len(admission_user['labels']) > 0:
                bot.send_message(chat_id=int(admission_user['name']), text=f"–ü–æ—Å—Ç—É–ø–∏–≤ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ <code>{call.from_user.last_name} {call.from_user.first_name}</code>.", parse_mode="HTML", reply_markup=telebot.util.quick_markup({"‚ÜóÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó ‚ÜóÔ∏è": {"callback_data": f"request_info_{card['id']}"}}, row_width=1))

        time.sleep(2)
        TEMPORARY_LISTS["admission_management_debounce"] = False

    elif call.data == "admission_contact_decline":
        bot.answer_callback_query(call.id, "–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
        bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    elif call.data == "admission_contact_onlinechat":
        bot.answer_callback_query(call.id, "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ.")

        markup = telebot.util.quick_markup({ "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ": {"callback_data": "admission_contact_accept"}, "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ üö´": {"callback_data": "admission_contact_decline"} }, row_width=2)
        bot.send_message(chat_id=call.from_user.id, text="–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –æ–Ω–ª–∞–π–Ω-—á–∞—Ç —ñ–∑ —á–ª–µ–Ω–æ–º –ø—Ä–∏–π–º–∞–ª—å–Ω–æ—ó –∫–æ–º—ñ—Å—ñ—ó?", reply_markup=markup, parse_mode="HTML")

    elif call.data == "admission_contact_phone":
        bot.answer_callback_query(call.id, "–ó–≤'—è–∑–æ–∫.")
        markup = telebot.util.quick_markup({ "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è": {"callback_data": "delete_it"} }, row_width=1)
        bot.send_message(chat_id=call.from_user.id, text="<b>–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π —Å–µ–∫—Ä–µ—Ç–∞—Ä –ü–ö:</b>\n<code>+38 (097) 501 92 77</code> <i>(Viber, Telegram, WhatsApp)</i>\n\n<b>–ü—ñ–¥–≥–æ—Ç–æ–≤—á—ñ –∫—É—Ä—Å–∏:</b>\n<code>+38 (096) 819 52 29</code> <i>(Viber, Telegram)</i>", reply_markup=markup, parse_mode="HTML")

    elif call.data == "admission_contact":
        bot.answer_callback_query(call.id, "–ó–≤'—è–∑–æ–∫.")
        markup = telebot.util.quick_markup({ "üìû –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ üìû": {"callback_data": "admission_contact_phone"}, "ü§ñ –û–Ω-–ª–∞–π–Ω —á–∞—Ç ü§ñ": {"callback_data": "admission_contact_onlinechat"}, "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è": {"callback_data": "delete_it"} }, row_width=2)
        bot.send_message(chat_id=call.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å–æ–± –∑–≤'—è–∑–∫—É:", reply_markup=markup, parse_mode="HTML")

    elif call.data == "cancel_feedback":
        for waiting in TEMPORARY_LISTS["wait_to_feedback"]:
            if waiting[0] == call.from_user.id:
                bot.edit_message_text(chat_id=call.from_user.id, message_id=waiting[1], text="–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –∑–≤'—è–∑–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                bot.answer_callback_query(call.id, "–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                TEMPORARY_LISTS["wait_to_feedback"].remove(waiting)
                break
        bot.answer_callback_query(call.id, "–¢–∞–∫–æ–≥–æ –∑–∞–ø–∏—Ç—É –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π.")

    elif call.data == "cancel_sharenew":
        for waiting in TEMPORARY_LISTS["wait_to_sharenew"]:
            if waiting[0] == call.from_user.id:
                bot.edit_message_text(chat_id=call.from_user.id, message_id=waiting[1], text="–ü–æ—à–∏—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                bot.answer_callback_query(call.id, "–ü–æ—à–∏—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                TEMPORARY_LISTS["wait_to_sharenew"].remove(waiting)
                break
        bot.answer_callback_query(call.id, "–¢–∞–∫–æ–≥–æ –∑–∞–ø–∏—Ç—É –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π.")

    elif call.data == "confirm_sharenew":
        for waiting in TEMPORARY_LISTS["wait_to_sharenew"]:
            if waiting[0] == call.from_user.id:
                w0, w1, w2, w3 = waiting[0], waiting[1], waiting[2], waiting[3]

                TEMPORARY_LISTS["wait_to_sharenew"].remove(waiting)

                bot.answer_callback_query(call.id, "–ü—Ä–æ—Ü–µ—Å —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–æ.")
                trello.cards.new_action_comment(card_id_or_shortlink=waiting[2], text=f"–ù–æ–≤–∏–Ω—É –±—É–ª–æ –ø–æ—à–∏—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º @{call.from_user.username}.")

                bot.edit_message_text(chat_id=call.from_user.id, message_id=waiting[1],
                                      text=f"üïê –†–æ–∑—Å–∏–ª–∫—É –Ω–æ–≤–∏–Ω–∏ `{waiting[3]}` –±—É–ª–æ —Ä–æ–∑–ø–æ—á–∞—Ç–æ.", parse_mode="Markdown")
                share_new(waiting[2])
                bot.edit_message_text(chat_id=call.from_user.id, message_id=waiting[1],
                                      text=f"‚úÖ –†–æ–∑—Å–∏–ª–∫—É –Ω–æ–≤–∏–Ω–∏ `{waiting[3]}` –±—É–ª–æ **–∑–∞–≤–µ—Ä—à–µ–Ω–æ**.", parse_mode="Markdown")

                break
        bot.answer_callback_query(call.id, "–¢–∞–∫–æ–≥–æ –∑–∞–ø–∏—Ç—É –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π.")

    elif "share_new" in call.data:
        for waiting in TEMPORARY_LISTS["wait_to_sharenew"]:
            if waiting[0] == call.from_user.id:
                sharenew_cardid = str.split(call.data, "_")[2]

                waiting[2] = sharenew_cardid # id
                waiting[3] = trello.cards.get(card_id_or_shortlink=sharenew_cardid)["name"]

                share_markup = telebot.util.quick_markup({"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ ‚úÖ": {"callback_data": "confirm_sharenew"}, "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå": {"callback_data": "cancel_sharenew"}}, row_width=1)
                bot.edit_message_text(chat_id=call.from_user.id, message_id=waiting[1], text=f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É `{waiting[3]}`?", reply_markup=share_markup, parse_mode="Markdown")

                bot.answer_callback_query(call.id, "–ù–æ–≤–∏–Ω—É –æ–±—Ä–∞–Ω–æ.")
                break
        bot.answer_callback_query(call.id, "–¢–∞–∫–æ–≥–æ –∑–∞–ø–∏—Ç—É –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π.")

    elif "feedback_type" in call.data:
        feedback_type = str.split(call.data, "_")[2]
        str_feedback_type = feedback_type
        feedback_type_index = int(str.split(call.data, "_")[3])

        for info in config.FEEDBACK_VARIANTS:
            if info[0] == feedback_type:
                str_feedback_type = info[1]

        for waiting in TEMPORARY_LISTS["wait_to_feedback"]:
            if waiting[0] == call.from_user.id:
                feedback_markup = telebot.util.quick_markup({"‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå": {"callback_data": "cancel_feedback"}}, row_width=1)

                bot.edit_message_text(chat_id=call.from_user.id, message_id=waiting[1], text=f"–¢–∏–ø –∑–≤–µ—Ä—Ç–∞–Ω–Ω—è: `{str_feedback_type}`.\n–û–ø–∏—à—ñ—Ç—å —Å—É—Ç—å –∑–≤–µ—Ä—Ç–∞–Ω–Ω—è.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –¥—ñ—é.", reply_markup=feedback_markup)

                bot.answer_callback_query(call.id, "–¢–∏–ø –∑–≤–µ—Ä—Ç–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ.")
                waiting[2] = feedback_type
                waiting[3] = str_feedback_type

                break
        bot.answer_callback_query(call.id, "–¢–∞–∫–æ–≥–æ –∑–∞–ø–∏—Ç—É –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π.")


if __name__ == "__main__":
    bot.infinity_polling()